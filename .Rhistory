files
list.files(pattern = "[.]rmd$")
list.files(pattern = "[.]Rmd")
files <- list.files(pattern = "[.]Rmd")
for (f in files) rmarkdown::render(f)
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
setwd('../')
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
library(readxl)
library(dplyr)
library(stringr)
library(geosphere)
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
head(medicos)
write.table(medicos, 'medicos.csv', sep=',', row.names = F)
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
dist <- numeric(length(pacientes$Medico))
head(pacientes)
# distribuição da distância
hist_boxplot(pacientes$dist)
# gráfico de histograma com boxplot
hist_boxplot <- function(var) {
g1 <- ggplot(pacientes, aes(var)) + geom_histogram(fill=fill_color, color='white') +
theme_minimal() + xlim(range(var))
g2 <- ggplot(pacientes, aes(var)) + geom_boxplot(fill=fill_color, color='black') +
theme_minimal() + xlim(range(var))
grid.arrange(g1,g2, ncol=1)
}
# distribuição da idade
hist_boxplot(pacientes$Idade)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(leaflet)
library(corrplot)
library(leaflet)
pacientes <- read.table('./data/pacientes.csv', sep=',', h=T)
head(pacientes)
summary(pacientes$Longitude)
summary(pacientes$Latitude)
# medidas para a idade
pacientes %>% group_by(Medico) %>%
summarise(min = min(Idade),
media = mean(Idade),
mediana = median(Idade),
max = max(Idade),
variância = var(Idade)
)
# medidas para a distância
pacientes %>% group_by(Medico) %>%
summarise(min = min(dist),
media = mean(dist),
mediana = median(dist),
max = max(dist),
variância = var(dist)
)
fill_color <- 'royalblue'
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal()
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal()
g_freq_med
source('../01analise_descritiva.R')
source('01analise_descritiva.R')
# gráfico de boxplot de acordo com o médico
boxplot_idade <- function(var) {
ggplot(pacientes, aes(x=Medico, y=var)) + geom_boxplot(fill= fill_color) +
theme_minimal()
}
# boxplot para a idade de acordo com o médico
boxplot_idade(pacientes$Idade)
source('01analise_functions.R')
source('01analise_functions.R')
library(shiny)
pacientes[,'Idade']
source('./01analise_functions.R')
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal()
source('./01analise_functions.R')
head(pacientes)
summary(pacientes$Idade)
hist(pacientes$Idade)
head(pacientes) %>% knitr(align='c', booktabs=T)
library(knitr)
library(knitr)
head(pacientes) %>% knitr(align='c', booktabs=T)
head(pacientes) %>% kable(align='c', booktabs=T)
pacientes$dist <- round(dist / 1000)
pacientes
pacientes$dist
pacientes$dist <- round(dist / 1000, 3)
pacientes$dist
dist / 1000
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
# distância
dist <- numeric(length(pacientes$Medico))
for(i in seq_along(pacientes$Medico)){
ind <- grep(pacientes[i,3], LETTERS[1:7])
dist[i] <- distHaversine(pacientes[i,c(2,1)], medicos[ind, c(3,2)])
}
pacientes$dist <- round(dist / 1000, 3)
library(readxl)
library(dplyr)
library(stringr)
library(geosphere)
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
head(medicos)
write.table(medicos, ',/data/medicos.csv', sep=',', row.names = F)
pacientes <- read_xlsx('./data/dados_raw.xlsx')
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
head(medicos)
write.table(medicos, ',/data/medicos.csv', sep=',', row.names = F)
write.table(medicos, './data/medicos.csv', sep=',', row.names = F)
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
# distância
dist <- numeric(length(pacientes$Medico))
for(i in seq_along(pacientes$Medico)){
ind <- grep(pacientes[i,3], LETTERS[1:7])
dist[i] <- distHaversine(pacientes[i,c(2,1)], medicos[ind, c(3,2)])
}
pacientes$dist <- round(dist / 1000, 3)
pacientes$dist
pacientes$Categoria[pacientes$Idade < 40] = "menor que 40"
pacientes
pacientes$Categoria
summary(pacientes$Idade)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
library(readxl)
library(dplyr)
library(stringr)
library(geosphere)
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
head(medicos)
write.table(medicos, './data/medicos.csv', sep=',', row.names = F)
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
# distância
dist <- numeric(length(pacientes$Medico))
for(i in seq_along(pacientes$Medico)){
ind <- grep(pacientes[i,3], LETTERS[1:7])
dist[i] <- distHaversine(pacientes[i,c(2,1)], medicos[ind, c(3,2)])
}
pacientes$dist <- round(dist / 1000, 3)
summary(pacientes$Idade)
case_when(
pacientes$Idade < 40 ~ '0 a 14'
)
case_when(
pacientes$Idade <= 14 ~ '0 a 14',
pacientes$Idade <= 24 ~ '15 a 24',
pacientes$Idade < 14 ~ '25 a 64',
TRUE ~ 'acima de 60'
)
case_when(
pacientes$Idade <= 14 ~ '0 a 14',
pacientes$Idade <= 24 ~ '15 a 24',
pacientes$Idade <= 65 ~ '25 a 64',
TRUE ~ 'acima de 60'
)
case_when(
pacientes$Idade <= 14 ~ '0 a 14',
pacientes$Idade <= 24 ~ '15 a 24',
pacientes$Idade <= 65 ~ '25 a 64',
TRUE ~ 'acima de 60'
)
case_when(
TRUE ~ 'acima de 60',
pacientes$Idade <= 65 ~ '25 a 64',
pacientes$Idade <= 24 ~ '15 a 24',
pacientes$Idade <= 14 ~ '0 a 14'
)
case_when(
pacientes$Idade <= 14 ~ '0 a 14',
pacientes$Idade <= 24 ~ '15 a 24',
pacientes$Idade <= 65 ~ '25 a 64',
TRUE ~ 'acima de 60'
)
summary(pacientes$Idade)
case_when(
pacientes$Idade <= 20 ~ 'menor que 20',
pacientes$Idade <= 40 ~ '20 a 40',
pacientes$Idade <= 60 ~ '40 a 60',
TRUE ~ 'acima de 60'
)
pacientes$categoria <- case_when(
pacientes$Idade <= 20 ~ 'menor que 20',
pacientes$Idade <= 40 ~ '20 a 40',
pacientes$Idade <= 60 ~ '40 a 60',
TRUE ~ 'acima de 60'
)
library(readxl)
library(dplyr)
library(stringr)
library(geosphere)
##### médicos #####
medicos <- read_xlsx('./data/dados_raw.xlsx', sheet = 2)
str_split(medicos$Local, ' ') %>%
sapply(function(x) {
return(x[2])
}) -> medicos$Local
head(medicos)
write.table(medicos, './data/medicos.csv', sep=',', row.names = F)
##### pacientes #####
pacientes <- read_xlsx('./data/dados_raw.xlsx')
head(pacientes)
# distância
dist <- numeric(length(pacientes$Medico))
for(i in seq_along(pacientes$Medico)){
ind <- grep(pacientes[i,3], LETTERS[1:7])
dist[i] <- distHaversine(pacientes[i,c(2,1)], medicos[ind, c(3,2)])
}
pacientes$dist <- round(dist / 1000, 3)
# categorizando idade
pacientes$categoria <- case_when(
pacientes$Idade <= 20 ~ 'menor que 20',
pacientes$Idade <= 40 ~ '20 a 40',
pacientes$Idade <= 60 ~ '40 a 60',
TRUE ~ 'acima de 60'
)
write.table(pacientes, './data/pacientes.csv', sep=',', row.names = F)
head(pacientes) %>% kable(align='c', booktabs=T)
library(shiny)
library(shiny)
library(knitr)
head(pacientes) %>% kable(align='c', booktabs=T)
install.packages('rmdformats ')
install.packages('rmdformats')
pacientes
pacientes %>% filter(dist < 50)
pacientes %>% filter(dist < 50)
pacientes
pacientes %>% filter(dist > 50)
pacientes %>% filter(dist > 50) %>% kable(align='c', booktabs=T)
cor(pacientes[,4:5])
cor(pacientes[,4:5])
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot()
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed()
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed(lower = T)
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed(lower = F)
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed(lower = F)
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed()
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed(order='AOE')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot::corrplot.mixed(order='AOE')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE')
library(corrplot)
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot()
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE', col='black')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed(order='AOE', addCoef.col = 'black')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot.mixed( addCoef.col = 'black')
cor(pacientes[,c('Idade', 'dist')]) %>% corrplot(addCoef.col = 'black')
cor(pacientes[,c('Idade', 'dist')]) %>%
corrplot(addCoef.col = 'black', tl.pos = 'd', cl.pos = 'n')
corrplot(order="AOE', addCoef.col = 'black', tl.pos = 'd', cl.pos = 'n')
cor(pacientes[,c('Idade', 'dist')]) %>%
corrplot(order="AOE", addCoef.col = 'black', tl.pos = 'd', cl.pos = 'n')
cor(pacientes[,c('Idade', 'dist')]) %>%
corrplot(order="AOE", addCoef.col = 'black', tl.pos = 'd', cl.pos = 'n')
cor(pacientes[,c('Idade', 'dist')])
# função para fazer tabelas
make_table <- function(table, align='c', booktabs=T){
kable(table, align = 'c', booktabs=T)
}
# função para fazer tabelas
make_table <- function(table, align='c', booktabs=T){
kable(table, align = align, booktabs=booktabs)
}
cor(pacientes[,c('Idade', 'dist')]) %>% make_table()
head(pacientes) %>% make_table()
cor(pacientes[,c('Idade', 'dist')]) %>% make_table()
table(pacientes$Medico, pacientes$categoria)
table(pacientes$Medico, pacientes$categoria) %>% prop.table()
%>% round(,2)
%>% round(2)
table(pacientes$Medico, pacientes$categoria) %>%
prop.table() %>% round(2)
table(pacientes$Medico, pacientes$categoria) %>%
prop.table() %>% round(3)
table(pacientes$Medico, pacientes$categoria) %>%
prop.table(margin = 1) %>% round(3)
table(pacientes$Medico, pacientes$categoria) %>%
prop.table(margin = 1) %>% round(3) %>% make_table()
tabela_medicos <- table(pacientes$Medico, pacientes$categoria) %>%
prop.table(margin = 1) %>% round(3)
tabela_medicos %>% make_table()
chisq.test(tabela_medicos)
table(pacientes$Medico, pacientes$categoria) %>%
prop.table(margin = 1) %>% round(3) %>% make_table()
base <- table(pacientes$Medico, pacientes$categoria)
base
tab <- base %>% make_table()
tab
tab
base <- table(pacientes$Medico, pacientes$categoria)
tab
base <- table(pacientes$Medico, pacientes$categoria)
base
tab %>% as.data.frame()
base <- table(pacientes$Medico, pacientes$categoria)
tab <- base
tab %>% as.data.frame()
tab %>% as.data.frame.array()
head(pacientes)
plot(pacientes$dist, pacientes$Idade)
pacientes <- pacientes %>% filter(dist < 50)
pacientes <- pacientes %>% filter(dist < 50)
pacientes$dist
pacientes$dist %>% summary()
plot(pacientes$dist, pacientes$Idade)
lm(pacientes$dist ~ pacientes$Idade)
lm(pacientes$dist ~ pacientes$Idade) %<% summary()
lm(pacientes$dist ~ pacientes$Idade) %>% summary()
lm(pacientes$dist ~ pacientes$Idade) %>% plot()
kmeans(pacientes)
kmeans(pacientes, centers=2)
library(shiny)
library(shiny)
library(knitr)
library(corrplot)
knitr::opts_chunk$set(message = F, warning = F, echo=F)
source("./01analise_functions.R")
library(shiny)
library(knitr)
library(corrplot)
knitr::opts_chunk$set(message = F, warning = F, echo=F)
source("./01analise_functions.R")
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal()
table(pacientes$Medico)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=table(pacientes$Medico)))
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=table(Medico)), data = table(Medico))
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=table(Medico)), data = table(pacientes$Medico))
geom_text(aes(y=table(Medico)), data = table(pacientes$Medico))
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(label=y), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(label=Medico), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=Medico, label=Medico), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=Medico, label=count(Medico)), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=Medico, label=..count..), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=Medico, label=table(pacientes$Medico)), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=Medico, label=Medico), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=Medico), vjust=0)
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=Medico), vjust=0, stat = 'count')
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=..count..), vjust=0, stat = 'count')
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=..count..), vjust=-1, stat = 'count')
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=..count..), vjust=1, stat = 'count')
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=Medico)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=..count..), vjust=1.5, stat = 'count')
mapa_medico()
pacientes %>% filter(dist > 50) %>% make_table()
pacientes <- pacientes %>% filter(dist < 50)
mapa_medico()
mapa_idade()
# frequência de atendimento por médicos
pacientes %>%
ggplot(aes(x=categoria)) + geom_bar(fill=fill_color) + theme_minimal() +
geom_text(aes(y=..count.., label=..count..), vjust=1.5, stat = 'count')
pdf_to_data_frame_vestibular_v1 <- function(file){
text0 <- file
text <- gsub('.nulada', '99', text0)
a = gsub(" |[A-Za-zÃ-ÈÃÃ ]|\n|.*\\)|\\*","",text)
a2 = gsub('\\/..', '', a)
pattern = regex("[0-9]{6,}")
b = str_extract_all(a2,pattern)
valores <- c()
for(i in 1:7){
for (x in b[[i]]){
if(nchar(x) == 6){
valores <- append(valores, substr(x,1,4))
} else if(nchar(x) == 8){
valores <-append(valores, substr(x,3,6))
} else{
for(i in seq(6,nchar(x), by=6)){
valores <- append(valores, substr(x,i-3,i))
}
}
}
}
pergunta <- substr(valores, 1,2)
resposta <- substr(valores, 3,4)
result <- data.frame(pergunta,resposta)
result[c(1:40),2]  %>% as.vector() %>% as.numeric() -> p1
result[c(41:50),2] %>% as.vector() %>% as.numeric() -> p2
result[c(51:55),2] %>% as.vector() %>% as.numeric() -> p3
result[c(56:60),2] %>% as.vector() %>% as.numeric() -> p4
result[c(61:65),2] %>% as.vector() %>% as.numeric() -> p5
result[c(66:70),2] %>% as.vector() %>% as.numeric() -> p6
result[c(71:90),2] %>% as.vector() %>% as.numeric() -> p7
result[c(91:110),2] %>% as.vector() %>% as.numeric() -> p8
result[c(111:130),2] %>% as.vector() %>% as.numeric() -> p9
result[c(131:150),2] %>% as.vector() %>% as.numeric() -> p10
result[c(151:170),2] %>% as.vector() %>% as.numeric() -> p11
result[c(171:190),2] %>% as.vector() %>% as.numeric() -> p12
result[c(191:210),2] %>% as.vector() %>% as.numeric() -> p13
result[c(211:230),2] %>% as.vector() %>% as.numeric() -> p14
result[c(231:250),2] %>% as.vector() %>% as.numeric() -> p15
areas_p1 <- c(rep('cg', 40), rep('pt', 10), rep('lit', 5),
rep('es', 5), rep('fr', 5), rep('en', 5))
areas_p2 <- rep(c('arte', 'bio', 'edf', 'filo', 'fis', 'geo',
'hist', 'mat', 'quim', 'sol'), each=20)
result$area <- c(areas_p1, areas_p2)
teste <- list(cg = p1,
pt = p2,
es = p3,
fr = p4,
en = p5,
arte = p6,
bio = p7,
edf = p8,
filo = p9,
fis = p10,
geo = p11,
hist = p12,
mat = p13,
quim = p14,
sol = p15)
return(teste)
}
ano <- c(2018, 2019)
versao <- c('inverno', 'verao')
for(ano in ano){
for(versao in versao){
file <- paste0('vestibular_', ano, '_', versao)
pdf_path <- paste0('./pdf/vestibular/', file ,'.pdf')
txt_output <- pdftools::pdf_text(pdf_path)
filename = paste0('./vestibular/' , file, '.json')
result <- pdf_to_data_frame_vestibular_v1(txt_output)
toJSON(result, pretty = T, auto_unbox=T) %>% write(filename)
}
}
ano <- 2019
versao <- 'verao'
ano <- 2019
versao <- 'verao'
file <- paste0('vestibular_', ano, '_', versao)
pdf_path <- paste0('./pdf/vestibular/', file ,'.pdf')
txt_output <- pdftools::pdf_text(pdf_path)
